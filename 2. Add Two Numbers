Problem Statement: 
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Link : https://leetcode.com/problems/add-two-numbers/description/

Example 1:

Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.
Example 2:

Input: l1 = [0], l2 = [0]
Output: [0]
Example 3:

Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]
 

Constraints:

=> The number of nodes in each linked list is in the range [1, 100].
=> 0 <= Node.val <= 9
=> It is guaranteed that the list represents a number that does not have leading zeros.


CODE

//JAVA Code

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode head=null;
        ListNode last=null;
        ListNode num1=l1;
        ListNode num2=l2;
        int carry=0;
        int data=0;
        int sum=0;
        while(num1!=null && num2!=null){
            sum= num1.val+num2.val+carry;
            data=sum%10;
            carry=sum/10;
            ListNode newnode=new ListNode(data);
            if(head==null){
                head=newnode;
            }else{
                last.next=newnode;
            }
            last=newnode;
            num1=num1.next;
            num2=num2.next;
        }
        while(num1!=null){
            sum=num1.val+carry;
            data=sum%10;
            carry=sum/10;
            ListNode newnode=new ListNode(data);
            last.next=newnode;
            last=newnode;
            num1=num1.next;
        }
        while(num2!=null){
            sum=num2.val+carry;
            data=sum%10;
            carry=sum/10;
            ListNode newnode=new ListNode(data);
            last.next=newnode;
            last=newnode;
            num2=num2.next;
        }
        if(carry!=0){
            ListNode newnode=new ListNode(carry);
            last.next=newnode;
            last=newnode;
        }

        return head;
    }
}
