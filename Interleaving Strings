INTERLEAVING STRINGS

Leetcode Link: https://leetcode.com/problems/interleaving-string/description

PROBLEM STATEMENT:

Given strings s1, s2, and s3, find whether s3 is formed by an interleaving of s1 and s2.
An interleaving of two strings s and t is a configuration where s and t are divided into n and m substrings respectively, such that:
s = s1 + s2 + ... + sn
t = t1 + t2 + ... + tm
|n - m| <= 1
The interleaving is s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ...
Note: a + b is the concatenation of strings a and b.

CONSTRAINTS:
0 <= s1.length, s2.length <= 100
0 <= s3.length <= 200
s1, s2, and s3 consist of lowercase English letters.

EXAMPLE: 

Input: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbcbcac"
Output: true
Explanation: One way to obtain s3 is:
Split s1 into s1 = "aa" + "bc" + "c", and s2 into s2 = "dbbc" + "a".
Interleaving the two splits, we get "aa" + "dbbc" + "bc" + "a" + "c" = "aadbbcbcac".
Since s3 can be obtained by interleaving s1 and s2, we return true.
Example 2:

Input: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbbaccc"
Output: false
Explanation: Notice how it is impossible to interleave s2 with any other string to obtain s3.
Example 3:

Input: s1 = "", s2 = "", s3 = ""
Output: true

-------------------------------------------------------------------------------------------------
CODE
//JAVA 
//Backtracking approach (Time Limit Exceeded)

class Solution {
    public boolean validmix(int i1,int i2,int i3,String s1,String s2,String s3){
        if(i3==s3.length()){
            return true;
        }
        
        if(i1<s1.length() && i2<s2.length() && s1.charAt(i1)==s3.charAt(i3) && s2.charAt(i2)==s3.charAt(i3)){
            boolean check=validmix(i1+1,i2,i3+1,s1,s2,s3);
            if(check){
                return true;
            }
            return validmix(i1,i2+1,i3+1,s1,s2,s3);
        }

        if(i2<s2.length() &&  s2.charAt(i2)==s3.charAt(i3)){
            return validmix(i1,i2+1,i3+1,s1,s2,s3);
        }

        if(i1<s1.length() &&s1.charAt(i1)==s3.charAt(i3) ){
            return validmix(i1+1,i2,i3+1,s1,s2,s3);
        }
        return false;
    }
    public boolean isInterleave(String s1, String s2, String s3) {
        int i1=0,i2=0,i3=0;
        if(s1.length()+s2.length()!=s3.length()){
            return false;
        }
        return validmix(i1,i2,i3,s1,s2,s3);
    }
}
------------------------------------------------------------------------------------------------
//JAVA
// Using DP

class Solution {
    public boolean validmix(int i1,int i2,int i3,String s1,String s2,String s3,Boolean[][] dp){
        if(i3==s3.length()){
            return true;
        }
        if(i1<s1.length() && i2<s2.length() && dp[i1][i2]!=null){
            return dp[i1][i2];
        }
        if(i1<s1.length() && i2<s2.length() && s1.charAt(i1)==s3.charAt(i3) && s2.charAt(i2)==s3.charAt(i3)){
            boolean check=validmix(i1+1,i2,i3+1,s1,s2,s3,dp);
            if(check){
                if(i1<s1.length() && i2<s2.length()){
                dp[i1][i2]=true;
                }
                return true;
            }
            check= validmix(i1,i2+1,i3+1,s1,s2,s3,dp);
            if(i1<s1.length() && i2<s2.length()){
                dp[i1][i2]=check;
            }
            return check;
        }

        else if(i2<s2.length() && s2.charAt(i2)==s3.charAt(i3)){
            boolean check= validmix(i1,i2+1,i3+1,s1,s2,s3,dp);
            if(i1<s1.length() && i2<s2.length()){
                dp[i1][i2]=check;
            }
            return check;
        }

        else if(i1<s1.length() && s1.charAt(i1)==s3.charAt(i3)){
            boolean check= validmix(i1+1,i2,i3+1,s1,s2,s3,dp);
            if(i1<s1.length() && i2<s2.length()){
                dp[i1][i2]=check;
            }
            return check;
        }
        else{
            if(i1<s1.length() && i2<s2.length()){
                dp[i1][i2]=false;
            }
            return false;
        }
        
    }
    public boolean isInterleave(String s1, String s2, String s3) {
        int i1=0,i2=0,i3=0;
        Boolean[][] dp=new Boolean[s1.length()][s2.length()]; 
        if(s1.length()+s2.length()!=s3.length()){
            return false;
        }
        return validmix(i1,i2,i3,s1,s2,s3,dp);
    }
}
